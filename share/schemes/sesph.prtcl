
let fluid = particle_selector types {fluid} tags {};
let boundary = particle_selector types {boundary} tags {};

let x = field position : varying real[];
let v = field velocity : varying real[];
let a = field acceleration : varying real[];

let rho = field density : varying real;
let p = field pressure : varying real;
let m = field mass : varying real;
let V = field volume : varying real;

let kappa = field compressibility : uniform real;
let rho0 = field rest_density : uniform real;
let nu = field viscosity : uniform real;

let mean_rho = field mean_density : uniform real;

let g = field gravity : global real[];
let h = field smoothing_scale : global real;

procedure compute_density_and_pressure {
  foreach fluid particle f {
    compute rho[f] = 0;
    foreach fluid neighbor f_f {
      compute rho[f] += m[f_f] * kernel_h(x[f] - x[f_f], h[_]);
    }
    foreach boundary neighbor f_b {
      compute rho[f] += V[f_b] * rho0[f] * kernel_h(x[f] - x[f_b], h[_]);
    }
    compute p[f] = kappa[f] * max(0, rho[f] / rho0[f] - 1);
  }
}

procedure compute_acceleration {
  foreach fluid particle f {
    // gravity
    compute a[f] = g[_];

    foreach fluid neighbor f_f {
      // viscosity
      compute a[f] += 
          (
              nu[f] * (m[f_f] / rho[f_f])
            *
              dot(v[f] - v[f_f], x[f] - x[f_f])
            /
              (norm_squared(x[f] - x[f_f]) + 0.01 * h[_] * h[_])
          )
        *
          kernel_gradient_h(x[f] - x[f_f], h[_]);                                         

      // pressure
      compute a[f] -= 
          m[f_f]
        *
          (p[f] / (rho[f] * rho[f]) + p[f_f] / (rho[f_f] * rho[f_f]))
        *
          kernel_gradient_h(x[f] - x[f_f], h[_]);                                             
    }

    foreach boundary neighbor f_b {
      // viscosity
      compute a[f] += 
          (
              nu[f_b] * V[f_b]
            *
              dot(v[f] - v[f_b], x[f] - x[f_b])
            /
              (norm_squared(x[f] - x[f_b]) + 0.01 * h[_] * h[_])
          )
        *
          kernel_gradient_h(x[f] - x[f_b], h[_]);                                         

      // pressure
      compute a[f] -= 
          0.7 * V[f_b] * rho0[f]
        *
          (2 * p[f] / (rho[f] * rho[f]))
        *
          kernel_gradient_h(x[f] - x[f_b], h[_]);                                             
    }
  }
}

